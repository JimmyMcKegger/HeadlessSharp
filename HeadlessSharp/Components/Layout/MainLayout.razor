@inherits LayoutComponentBase
@implements IObserver;
@implements IDisposable;


<div class="page">
    <div class="sidebar" style=@mySidebar>
        <NavMenu ShopDetails="@ShopDetails"/>
    </div>

    <main>
        <div class="top-row px-4">
            <a href="#">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code{
    public string mySidebar="sidebar";
    private string? primary;
    private string? secondary;

    void ApplyBranding(string first, string second)
    {
        mySidebar = $"background-image: linear-gradient(180deg, {first} 0%, {second} 70%) !important;";
    }

    private JObject? ShopDetails = null;
    
    // initial page load should have the observer subscribe to the observable
    // then it triggers the API request to populate data
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            Startup();
        }
    }
    
    public void Update(JObject shopInfo)
    {
        InvokeAsync(() =>
        {
            try
            {
                ShopDetails = shopInfo;
                var shop = shopInfo["shop"];
                primary = shop["brand"]?["colors"]?["primary"]?[1]?["foreground"]?.ToString();
                secondary = shop["brand"]?["colors"]?["secondary"]?[1]?["background"]?.ToString();

                if (primary is not null && secondary is not null)
                {
                    ApplyBranding(primary, secondary);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"Main layout update error: {e}");
            }
            StateHasChanged();
        });
    }
  
    private async Task Startup()
    {
        SfapiSubject.GetInstance().RegisterObserver(this);
        await SfapiSubject.GetInstance().GetShopInfo();
    }
    
    public void Dispose()
    {
        try
        {
            Console.WriteLine("DISPOSING HOME COMPONENT");
            SfapiSubject.GetInstance().UnregisterObserver(this);
        }
        catch (Exception e)
        {
            Console.WriteLine($"DISPOSE ERROR: {e.Message}");
        }
    }
}