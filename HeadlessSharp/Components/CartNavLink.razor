@implements IObserver;
@implements IDisposable;
@inject IJSRuntime Js



<div class="nav-item px-3">
    <NavLink class="nav-link" href="cart">
        <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Cart @DisplayItems
    </NavLink>
   
</div>

@code {
    private int itemsInCart = 0;
    public int ItemsInCart { get; set; }
    private string displayItems = "";

    public string DisplayItems
    {
        get => ItemsInCart > 0 ? ItemsInCart.ToString() : "";
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Startup();
        }
    }
    
    private async void Startup()
    {
        SfapiSubject.GetInstance().RegisterCartObserver(this);
        await SfapiSubject.GetInstance().GetCartInfo();
    }
    
    public async void Update(JObject cartInfo)
    {
        InvokeAsync(() =>
        {
            try
            {
                var totalItems = cartInfo["cart"]["lines"]["nodes"].Select(line => (int?)line["quantity"] ?? 0).Sum();
                ItemsInCart = totalItems;
            }
            catch (Exception e)
            {
                Console.WriteLine($"CART UPDATE ERROR: {e.Message}");
            }
        });
        var NewCartId = cartInfo["cartCreate"]?["cart"]?["id"]?.ToString();
        await Js.InvokeVoidAsync("setCookie", "cart", NewCartId);
        StateHasChanged();
    }
    
    public void Dispose()
    {
        try
        {
            SfapiSubject.GetInstance().UnregisterCartObserver(this);
        }
        catch (Exception e)
        {
            Console.WriteLine($"DISPOSE ERROR: {e.Message}");
        }
    }
}