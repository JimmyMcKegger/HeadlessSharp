@page "/"
@implements IObserver;
@implements IDisposable;


<PageTitle>Home</PageTitle>

<h1>@shopName</h1>

<h2>@shopDescription</h2>

<br>
<div class="card-group">
    @if (products != null && products.Any())
    {
        @foreach (var product in products)
        {
            <div class="card" style="width:auto;" id=@product["id"]>
                
                @if (product?["featuredImage"]?["url"] != null)
                {
                    <img class="card-img-top" decoding="async" loading="lazy" src="@product?["featuredImage"]?["url"]" alt="Card image cap">
                }
                else
                {
                    <p>No image available</p>
                }
                <div class="card-body">
                    <h5 class="card-title">@product["title"]</h5>
                    
                    @if (product["variants"]["nodes"] != null)
                    {
                        var varId = product["variants"]?["nodes"]?[0]?["id"]?.ToString();
                        <button class="btn btn-primary" @onclick="() => AddToCart(varId)">
                            Add to Cart
                        </button>
                    }
                    else
                    {
                        <p>No variants available</p>
                    }

                </div>
            </div>
        }
   
    }
    else
    {
        <p>Loading products...</p>
    }
</div>

@code {
    private string? shopName = "Loading...";
    private string? shopDescription = "";
    private JToken? products = null;
    
    
    // initial page load should have the observer subscribe to the observable
    // then it triggers the API request to populate data
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Startup();
        }
    }

    public void AddToCart(string variantId)
    {
        Console.WriteLine($"Added to cart: Variant ID - {variantId}");
    }
    
    public void Update(JObject shopInfo)
    {
        InvokeAsync(() =>
        {
            Console.WriteLine(shopInfo.ToString());
            try
            {
                var shop = shopInfo["shop"];
                shopName = shop["name"]?.ToString();
                shopDescription = shop["brand"]?["shortDescription"]?.ToString();

                products = shopInfo["products"]?["nodes"];
            }
            catch (Exception e)
            {
                Console.WriteLine($"UPDATE ERROR: {e.Message}");
            }
        });
        StateHasChanged();
    }
    
    private async void Startup()
    {
        SfapiSubject.GetInstance().RegisterObserver(this);
        await SfapiSubject.GetInstance().GetShopInfo();
    }
    
    public void Dispose()
    {
        try
        {
            Console.WriteLine("DISPOSING HOME COMPONENT");
            SfapiSubject.GetInstance().UnregisterObserver(this);
        }
        catch (Exception e)
        {
            Console.WriteLine($"DISPOSE ERROR: {e.Message}");
        }
    }
}