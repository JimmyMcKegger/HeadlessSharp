@page "/"
@implements IObserver;
@implements IDisposable;


<PageTitle>Home</PageTitle>


<div class="jumbotron">
    <h1 class="display-2">@shopName</h1>
    <p class="lead">@slogan</p>
    <hr class="my-4">
    <p>@shopDescription</p>
</div>

<br/> 

<ProductCards Products=products></ProductCards>

@code {
    private string? shopName = "Loading...";
    private string? shopDescription = "";
    private string? slogan = "";
    private JToken? products = null;
    
    // initial page load should have the observer subscribe to the observable
    // then it triggers the API request to populate data
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Startup();
        }
    }
    
    public void Update(JObject shopInfo)
    {
        InvokeAsync(() =>
        {
            try
            {
                var shop = shopInfo["shop"];
                shopName = shop["name"]?.ToString();
                shopDescription = shop["brand"]?["shortDescription"]?.ToString();
                slogan = shop["brand"]?["slogan"]?.ToString();
                products = shopInfo["products"]?["nodes"];
            }
            catch (Exception e)
            {
                Console.WriteLine($"UPDATE ERROR: {e.Message}");
            }
        });
        StateHasChanged();
    }
    
    private async void Startup()
    {
        SfapiSubject.GetInstance().RegisterObserver(this);
        await SfapiSubject.GetInstance().GetShopInfo();
    }
    
    public void Dispose()
    {
        try
        {
            Console.WriteLine("DISPOSING HOME COMPONENT");
            SfapiSubject.GetInstance().UnregisterObserver(this);
        }
        catch (Exception e)
        {
            Console.WriteLine($"DISPOSE ERROR: {e.Message}");
        }
    }
}